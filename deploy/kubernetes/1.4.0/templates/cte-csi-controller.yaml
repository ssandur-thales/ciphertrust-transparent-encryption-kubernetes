---
apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
      name: csi.cte.cpl.thalesgroup.com
spec:
      podInfoOnMount: true
      fsGroupPolicy: File
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: cte-csi-controller
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: cte-csi-controller
  template:
    metadata:
      labels:
        app: cte-csi-controller
    spec:
      serviceAccountName: cte-csi-controller
      priorityClassName: system-cluster-critical
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/controlplane"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      volumes:
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory

        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/csi.cte.cpl.thalesgroup.com/
            type: DirectoryOrCreate

        - name: kube-cred
          hostPath:
            path: /etc/kubernetes/
            type: Directory

        - name: dshm
          emptyDir:
            medium: Memory

      containers:
        - name: cte-csi
          image: "{{ .Values.image.cteCsiImage }}:{{ .Values.image.cteCsiTag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /csi/csi-controller.sock"]
          args:
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--nodeid=$(KUBE_NODE_NAME)"
            - "--namespace=$(KUBE_NAMESPACE)"
            - "--v={{ .Values.image.logLevel }}"
            - "--controller"
            - "--apiburst={{ .Values.APIServerThrottle.burst }}"
            - "--apiqps={{ .Values.APIServerThrottle.qps }}"
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi-controller.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            privileged: true
            capabilities:
              add:
                - SYS_ADMIN
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: kube-cred
              mountPath: /etc/kubernetes/

        - name: cte-csi-signer
          image: "{{ .Values.image.cteCsiImage }}:{{ .Values.image.cteCsiTag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /csi/csi-controller.sock"]
          args:
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--nodeid=$(KUBE_NODE_NAME)"
            - "--namespace=$(KUBE_NAMESPACE)"
            - "--v={{ .Values.image.logLevel }}"
            - "--signer"
            - "--apiburst={{ .Values.APIServerThrottle.burst }}"
            - "--apiqps={{ .Values.APIServerThrottle.qps }}"
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi-controller.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            privileged: true
            capabilities:
              add:
                - SYS_ADMIN
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: kube-cred
              mountPath: /etc/kubernetes/
            - name: dshm
              mountPath: /dev/shm

        - name: csi-provisioner
          image: k8s.gcr.io/sig-storage/csi-provisioner:v3.1.0
          args:
            - "--v={{ .Values.image.logLevel }}"
            - "--csi-address=/csi/csi-controller.sock"
            - "--extra-create-metadata"
            - "--feature-gates=Topology=true"
            - "--leader-election"
            - "--timeout=60s"
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi-controller.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - mountPath: /csi
              name: plugin-dir

        # - name: csi-sidecar-registrar
        #   image: k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.0.1
        #   args:
        #     - "--csi-address=/csi/csi.sock"
        #     - "--kubelet-registration-path=/var/lib/kubelet/plugins/cte.csi/csi.sock"
        #     - "--v=5"
        #   securityContext:
        #     privileged: true
        #   volumeMounts:
        #     - name: plugin-dir
        #       mountPath: /csi
        #     - name: registration-dir
        #       mountPath: /registration

      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
